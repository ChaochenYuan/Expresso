{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Expresso documentation Expresso is based on coffea , wrapped with functionalities to share analysis methods between different analysis teams, proper logging support and ability to save the status of the analysis at various stages like preselection, preprocessing etc. Step 1: User issues one or more commands for different processes example: ./expresso.py --Sample DYsample.json --Analysis 'testAnalysis' --NumberOfTasks 2 ./expresso.py --Sample TTsample.json --Analysis 'testAnalysis' --NumberOfTasks 2 graph LR A(Sample files) --> C(expresso.py) B(Analysis files) --> C(expresso.py) C --> |Multiprocessing| D(pre processor) D --> E(pre selector) E --> F(save root file) E --> G(main analysis) G --> H(output) Step 2: User makes plots example: ./plot+.py --PlotterScript Analysis/testAnalysis/plot.yaml --HistoFolder ./Output/Analysis/testAnalysis/output/analysis/ graph LR H(output) --> I(plot+.py) I --> J(make plots)","title":"Expresso"},{"location":"#welcome-to-expresso-documentation","text":"Expresso is based on coffea , wrapped with functionalities to share analysis methods between different analysis teams, proper logging support and ability to save the status of the analysis at various stages like preselection, preprocessing etc.","title":"Welcome to Expresso documentation"},{"location":"#step-1-user-issues-one-or-more-commands-for-different-processes","text":"example: ./expresso.py --Sample DYsample.json --Analysis 'testAnalysis' --NumberOfTasks 2 ./expresso.py --Sample TTsample.json --Analysis 'testAnalysis' --NumberOfTasks 2 graph LR A(Sample files) --> C(expresso.py) B(Analysis files) --> C(expresso.py) C --> |Multiprocessing| D(pre processor) D --> E(pre selector) E --> F(save root file) E --> G(main analysis) G --> H(output)","title":"Step 1: User issues one or more commands for different processes"},{"location":"#step-2-user-makes-plots","text":"example: ./plot+.py --PlotterScript Analysis/testAnalysis/plot.yaml --HistoFolder ./Output/Analysis/testAnalysis/output/analysis/ graph LR H(output) --> I(plot+.py) I --> J(make plots)","title":"Step 2: User makes plots"}]}